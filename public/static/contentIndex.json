{"5-Principles-Prompt-Engineering":{"title":"5 Principles Prompt Engineering","links":[],"tags":[],"content":"Prompt engineering has emerged as a crucial skill for getting the most out of AI tools. There are 5 core principles that can help optimize prompts to make AI models more useful, reliable, and safe.\n1. Give Clear Direction §\nBrief the AI on exactly what you’re looking for. Providing context through instructions, role-playing, and seed words guides the model to generate outputs that match your vision. As the author explains, “A human would also struggle without a good brief.”\n2. Specify the Format §\nDefine the structure you want upfront. Specify JSON, comma-separated, image size, etc. This makes responses easier to parse and spot errors.\n3. Use Representative Examples §\nShow, don’t just tell. Include examples that demonstrate what you want without being overly restrictive. Curate your examples to improve results over time.\n4. Evaluate and Refine §\nTest prompts variants to identify issues. Simple approaches like thumbs up/down ratings help iterate and boost reliability.\n5. Divide Complex Tasks §\nChain together specialized prompts. Splitting prompts makes sophisticated tasks more manageable. Select the right model per task.\nThe Future of Work with AI §\nAs the author explains, these principles mirror management practices for human workers. Prompt engineering ultimately improves communication between humans and AI.\n\n“Prompt engineering develops the core skills for working professionally with AI.”\n\nWith more models on the horizon, prompt engineering will likely grow as a key job skill. Mastering these principles helps create reliable, productive relationships between humans and artificial intelligence."},"Fleeting-Notes":{"title":"Fleeting Notes","links":["Zettelkasten"],"tags":[],"content":"In the context of the Zettelkasten method, “fleeting notes” refer to brief, temporary notes that capture initial thoughts, ideas, or observations. These notes are typically taken quickly and without much detail, serving as a way to capture fleeting thoughts before they are forgotten.\nFleeting notes are meant to be temporary and are later processed into more coherent and organized notes within the Zettelkasten system."},"Google-Earth-Engine":{"title":"Google Earth Engine","links":["Interpreting-Time-Series-with-CCDC"],"tags":[],"content":"Hi\nTutorials §\nInterpreting Time Series with CCDC"},"Impact-of-Land-Cover-on-Environmental-Processes":{"title":"Impact of Land Cover on Environmental Processes","links":["Continuous-Change-Detection-and-Classification"],"tags":[],"content":"Land cover influence the energy balance, carbon budget, and. hydrological cycle as many different physical characteristics change as a function of land cover, such as albedo, emissivity, roughness, photosynthetic capacity and transpiration.]\nKey Concepts:\n\nLand Cover Types: Includes forests, grasslands, urban areas, etc.\nInfluence on Environmental Processes: Specifically affects energy balance, carbon budget, and hydrological cycle.\n\nExplanation:\n\nEnergy Balance:\n\nInfluence of Albedo: Different land covers have varying abilities to absorb and reflect sunlight and heat. E.g., forests have a lower albedo and absorb more heat compared to deserts.\nEmissivity Variations: Different surfaces emit heat at varied rates, affecting local and global temperatures.\n\n\nCarbon Budget:\n\nRole of Photosynthesis: Vegetation-rich areas absorb more CO2, impacting the atmospheric concentration of greenhouse gases.\nLand Cover and Carbon Storage: Different types of land cover store and release carbon differently, influencing global carbon levels.\n\n\nHydrological Cycle:\n\nTranspiration Effects: Areas with dense vegetation contribute to the water cycle through transpiration (release of water from plants).\nSurface Roughness and Water Movement: The physical texture of the land cover can influence evaporation rates and local climate patterns.\n\n\n\nRelevance and Importance:\n\nUnderstanding the impact of land cover on these processes is crucial for climate change studies, environmental management, and policy-making.\nThe interaction between land cover and these environmental processes is complex and multi-faceted, playing a critical role in global ecological balance.\n\nRelated §\nContinuous Change Detection and Classification"},"Interpreting-Time-Series-with-CCDC":{"title":"Interpreting Time Series with CCDC","links":[],"tags":[],"content":"GEE ability: access decades of imagery without the previous limitation of needing to download all the data to a local disk for processing\nChange Detection and Classification (CCDC) is a land change monitoring algorithm designed to operate on time series of satellite data.\nTheory §\nAdjacent observations are dependent: consecutive observations in a time series are not independent of each other, but rather each point is related to its preceding points.\nTemporal Segmentation §\nHow spectral change is detected? §\nSpectral change is detected at the pixel level by testing for structural breaks in a time series of reflectance. In Earth Engine, this process is referred to as “temporal segmentation,” as pixel-level time series are segmented according to periods of unique reflectance. It is done by fitting harmonic regression models to all spectral bands in the time series.\nHow the algorithm detect the changes? §\nThe model-fitting starts at the beginning of the time series and moves forward in time in an online approach to change detection. The coefficients are used to predict future observations, and if the residuals of future observations exceed a statistical threshold for numerous consecutive observations, then the algorithm flags that a change has occurred. After the change, a new regression model is fit and the process continues until the end of the time series.\nParameters §\nminObservations: number of consecutive observations required to flag a change\nchiSquareProbability and minNumOfYearsScaler default parameters of 0.99 and 1.33 respectively, control the sensitivity of the algorithm to detect change and the iterative curve fitting process required to detect change\nlambda and maxIteration parameters control the curve fitting process, higher maxIteration might take longer to complete\ntBreak: The time segment break date if a change is detected\nQuestions §\nWhat is harmonic regression models?\nIn EE temporal segmentation, the time series are segmented. Does the number of segments is predefined?\nNotes §\nWe can do a similar analysis for larger areas by first running the CCDC algorithm over a group of pixels.\nThe CCDC function in Earth Engine can take any ImageCollection. CCDC contains an internal cloud masking algorithm and is rather robust against missed clouds, but the cleaner the data the better.\nWe typically export the results to an Earth Engine asset first, and then inspect the asset. To avoid having issues such as taxing to the system very quickly, resulting in memory errors.\nExporting image to asset: larger tiles may take several hours to complete\nThe detection of a break does not always imply a change of land cover. Natural events, small-scale disturbances and seasonal cycles, among others, can result in the detection of a break by CCDC.\nA time series in Earth Engine is typically represented as an ImageCollection\nImageCollection characteristics:\n\nAt each pixel, there might be a distinct number of observations taken from a unique set of dates.\nThe size (length) of the time series can vary across pixels.\nData may be missing in any pixel at any point in the sequence (e.g., due to cloud masking).\n\nReference §\n\nNear Real Time monitoring of satellite image time-series: github\nGoogle Earth Engine Tutorials: web, github\nCCDC GUI: GEE App, [paper](# A Suite of Tools for Continuous Land Change Monitoring in Google Earth Engine)\ngee tutorial\n"},"Landsat":{"title":"Landsat","links":[],"tags":[],"content":""},"Natural-and-Anthropogenic-Land-Cover-Change":{"title":"Natural and Anthropogenic Land Cover Change","links":[],"tags":[],"content":"\n\nDefinition: Land cover change refers to the transformation of the physical and biological cover of the earth’s surface.\n\n\nNatural Causes:\n\nClimate Change: Alterations in temperature and precipitation patterns can transform landscapes, such as turning forests into grasslands.\nNatural Disasters: Events like wildfires, floods, and volcanic eruptions can drastically alter land cover.\nEcological Succession: Natural processes where one type of ecosystem evolves into another over time.\n\n\n\nAnthropogenic Causes:\n\nUrbanization: Expansion of cities and towns leads to the conversion of natural landscapes into urban areas.\nAgriculture: Clearing forests and grasslands for farming changes land cover significantly.\nDeforestation: Driven by logging, agriculture, and urban expansion, it leads to the loss of forest cover.\nIndustrial Activities: Mining, construction, and other industrial activities transform landscapes.\n\n\n\nImplications:\n\nBiodiversity Loss: Changes in land cover can lead to habitat loss and a decline in wildlife populations.\nClimate Change: Land cover change, particularly deforestation, can contribute to global warming.\nWater Cycle Alteration: Changes in land cover can affect local and regional water cycles, impacting water availability.\n\n\n"},"SpectralGPT":{"title":"SpectralGPT","links":[],"tags":[],"content":"Key takeaway §\n\nUniversal remote sensing foundation model\nTrained on one million spectral remote sensing Sentinel-2 images\n3 models (Million Parameters): Base (100M), large, (300M) huge (600M)\n3D masking strategy, encoder for learning visual representation from spatial-spectral mixed tokens, decoder with multi-target reconstruction for preserving spectrally sequential characteristics\nMasked autoencoder (MAE) framework, masking rate 90%\nNew benchmark dataset SegMunich, focuses on urban areas\nPretrained: 700k data 12 spectral bands from fMoW-S2 200 epoch, 350k BigEarthNet Sentinel-2 100 epoch. 8 NVIDIA RTX 4090 GPUs for training, 4 gpus for finetuning\n\nDownstream task §\n\nsingle/multi-label scene classification: EuroSAT S2 images 10 land classes 13 bands 3k labeled images, 150 epochs\nsemantic segmentation\nchange detection\n\nPrev works §\n\nMomentum contrast (MoCo): Introduce momentum updates to improve contrastive learning process\nSimple contrastive learning (SimCLR): Leverages data augmentations to enhance the variety and complexity of the image pairs used for contrastive learning\nGenerative learning based on masked image modeling (MIM)\n\nExample, MIM architecture: Bidirectional encoder representation from image transformer (BEiT) built on top of vision transformers (ViT). Also MIM allows for flexible use of various deep architectures as network backbones (ViT, Swin Transformers)\nMIM allows input of all images patches, high computational cost, limited for certain application\nMIM alternative: Masked autoencoders (MAE), unmasked patcher or pixels used to reconstruct those that are masked. Computationally more efficient\n\n\nSatMAE: Pre-training transformers for temporal and multi-spectral satellite imagery\nfMoW-S2 dataset: Training from scratch 700k images, 3D tensor-based random weight initialization\nBigEarthNet-S2 dataset: Progressive pre training on 350k images, varying image sizes, resolution, time series information, and geographic regions. Fine tuning data 35k images with labels\n"},"TensorFlow-Developer-Certification":{"title":"TensorFlow Developer Certification","links":[],"tags":[],"content":"TensorFlow has emerged as one of the most popular and widely used open-source libraries for machine learning and deep learning. Being TensorFlow Developer Certified not only validates your expertise in using TensorFlow effectively but also enhances your professional credibility in the field.\nI will guide you through the process of becoming TensorFlow Developer Certified, including what you need to prepare, an overview of the program, insights into the test format, and the motivation behind pursuing this certification.\nUnderstanding the Certification Program §\nThe TensorFlow Developer Certification program is designed to assess your ability to build and deploy machine learning models using TensorFlow. It covers a range of topics, including TensorFlow fundamentals, data input pipelines, model architecture, training, deployment, and optimization. The certification demonstrates your proficiency in applying TensorFlow to real-world scenarios, making you a valuable asset in the industry.\nPreparing for the Certification §\nTo increase your chances of success in the certification exam, it is essential to have a solid understanding of the TensorFlow framework and its applications. Here are some key steps to help you prepare effectively\nFamiliarize Yourself with TensorFlow §\nStart by understanding the basics of TensorFlow, including its architecture, data flow graphs, and operations. Explore the TensorFlow documentation, tutorials, and sample projects to gain hands-on experience.\nBuild and Train Models §\nPractice implementing various machine learning models using TensorFlow. This will help you develop a deep understanding of TensorFlow’s APIs, model architecture, and training techniques."},"Vim-Key-Bindings":{"title":"Vim Key Bindings","links":[],"tags":[],"content":"Vim is a highly customizable and efficient text editor that is popular among developers and power users. One of Vim’s standout features is its extensive set of keyboard shortcuts and commands, referred to as “key bindings.” Mastering these key bindings can greatly improve your productivity when editing files in Vim.\nWe will cover the most important and commonly used Vim key bindings to help you become a Vim ninja.\nBasic Navigation §\nThe most basic key bindings allow you to navigate through a document. Here are some of the main ones:\n\nh - Move left\nj - Move down\nk - Move up\nl - Move right\n\nYou can hold down the arrow keys for quicker continuous movement.\n\nCtrl + f - Page down\nCtrl + b - Page up\n0 (zero) - Move to beginning of line\n$ - Move to end of line\ngg - Go to beginning of file\nG - Go to end of file\n\nInsert Mode §\nTo enter Insert mode to start typing, press i. To exit back to Normal mode, press Esc.\nSome other useful Insert mode shortcuts:\n\ni - Insert before cursor\nI - Insert at beginning of line\na - Append after cursor\nA - Append to end of line\no - Open new line below\nO - Open new line above\n\nEditing Text §\nNow let’s look at some key bindings that allow you to edit text:\n\n\nx - Delete character\n\n\ndw - Delete word\n\n\ndd - Delete line\n\n\nd$ - Delete to end of line\n\n\nd0 - Delete to beginning of line\n\n\nc - Change/replace\n\n\ncw - Change current word\n\n\ncc - Change entire line\n\n\nu - Undo\n\n\nCtrl + r - Redo\n\n\ny - Yank/copy\n\n\nyy - Yank current line\n\n\np - Paste\n\n\n. - Repeat last command\n\n\nSearching §\nVim offers some handy search functionalities:\n\n/pattern - Search forward\n?pattern - Search backward\nn - Next match\nN - Previous match\n\nUse * to search for the word under cursor:\n\n* - Search forward for word under cursor\n# - Search backward\n\nExiting §\nTo save and quit:\n\n:w - Save file\n:wq - Save and quit\n:q! - Quit without saving\n\nVim’s key bindings allow you to edit text at the speed of thought. You now have a solid foundation of the most important and commonly used key bindings in Vim. Refer to this reference often as you continue to master this powerful editor. The more you practice using these shortcuts, the more efficient you will become editing files in Vim."},"Zettelkasten":{"title":"Zettelkasten","links":[],"tags":[],"content":"The Zettelkasten method is a note-taking and knowledge management system that was developed by German sociologist Niklas Luhmann. The term “Zettelkasten” translates to “slip box” in English.\nThe method involves using a collection of individual notes, or “Zettel,” which are small, self-contained units of information. Each note represents a single idea, concept, or piece of knowledge. These notes are typically written on index cards or in a digital format.\nThe Zettelkasten method emphasizes the interconnectedness of ideas and encourages the creation of links between related notes. The notes are organized in a non-linear, associative manner, allowing for easy retrieval and connection of information.\nThe key principles of the Zettelkasten method include:\n\nAtomicity: Each note should represent a single, concise idea or piece of information.\nInterconnectedness: Notes should be linked to other relevant notes to create a network of connections and associations.\nIncremental growth: The Zettelkasten grows gradually over time as new notes are added and connected to existing ones.\nPersonalization: The system should be adapted to suit individual preferences and needs.\nThe Zettelkasten method is often used for research, writing, and knowledge management, as it helps to organize and structure information in a way that facilitates understanding, creativity, and the generation of new ideas.\n"},"index":{"title":"Welcome","links":[],"tags":[],"content":"Hi, I’m Azka 👋🏼 §\nThis is my digital garden built using Quartz.\n\n\n                  \n                  Experience \n                  \n                \nData Scientist at Koltiva | Jan 2023 - Now\n\nPublished a paper as first author and presenter: “Self-Supervised ResNet Land Cover Classification” on International Workshop on Artificial Intelligence and Image Processing (IWAIIP) 2023\nNative Optical Character Regognition on Android Device\nDeforestation Detection\nChatbot\n\nProject Advisor (Machine Learning) at Google Bangkit Academy | Jun 2023 and Dec 2023\n\nGuide 6 capstone project teams to deploy their machine learning project\n\nData Scientist Intern at Telkom | Jun 2021-Aug 2022\n\nSpeaker Diarization: voice activity detection, voice recognition, audio clustering\n\n"},"land-cover-change":{"title":"land cover change","links":[],"tags":[],"content":""}}